#include <stdio.h>

#include <vector>

#include "api/BamReader.h"
#include "api/BamWriter.h"
#include "../OutSources/fasta/Fasta.h"
#include "../OutSources/stripedSW/ssw_cpp.h"

using namespace std;

void ShowHelp() {
  fprintf(stderr, "Usage: tangram_bam <in_bam> <ref_fa> <out_bam>\n\n");
  fprintf(stderr, "tangram_bam will generate ZA tags for bams");
  fprintf(stderr, " that are not generated by MOSAIK.\n");

  fprintf(stderr, "<ref_fa> is a fasta file containing insertion sequences\n");
  fprintf(stderr, " that we are going to detect them.\n");
}

bool OpenBams(
    const string& infilename,
    const string& outfilename,
    BamTools::BamReader* reader,
    BamTools::BamWriter* writer) {
  
  reader->Open(infilename);
  if (!reader->IsOpen()) {
    fprintf(stderr, "ERROR: The bam file, %s, cannot be open\n", infilename.c_str());
    return false;
  }

  // Load header and ref
  string header = reader->GetHeaderText();
  BamTools::RefVector ref = reader->GetReferenceData();

  if (!writer->Open(outfilename, header, ref)) {
    fprintf(stderr, "ERROR: The bam file, %s, cannot be open\n", outfilename.c_str());
    reader->Close();
    return false;
  }

  return true;
}

inline bool LoadReference(const char* fa, FastaReference* fasta) {
  string filename = fa;
  fasta->open(filename);

  return true;
}

bool BuildAligner(
    const FastaReference& fasta, 
    vector<StripedSmithWaterman::Aligner*>* aligners) {
  for (vector<string>::const_iterator ite = fasta.index->sequenceNames.begin();
       ite != fasta.index->sequenceNames.end(); ++ite) {
    //StripedSmithWaterman::aligner* al_ptr = new StripedSmithWaterman::aligner;
    //al_ptr->SetReferenceSequence(fasta.getSequence(*ite), ite->length);
    fprintf(stderr,"%s\n", (*ite).c_str());
  }

  return true;
}

int main(int argc, char** argv) {
  if (argc != 4) {
    ShowHelp();
    return 1;
  }

  // Open input bam
  string infilename = argv[1];
  string outfilename = argv[3];
  BamTools::BamReader reader;
  BamTools::BamWriter writer;
  if (!OpenBams(infilename, outfilename, &reader, &writer)) return 1;

  // Open fasta
  FastaReference fasta;
  LoadReference(argv[2], &fasta);

  // Build SSW aligners for every reference in fasta
  vector<StripedSmithWaterman::Aligner*> aligners;
  BuildAligner(fasta, &aligners);


  reader.Close();
  writer.Close();
}
